#!/usr/bin/perl
#
# finally!
#
# ---   *   ---   *   ---

# deps
package main;
  use v5.36.0;
  use strict;
  use warnings;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/ce/';

  use Rect;

  use lib $ENV{'ARPATH'}.'/lib/sys/';
  use lib $ENV{'ARPATH'}.'/lib/';

  use Style;
  use Arstd::String;
  use Arstd::IO;

  use Lycon;

  use Lycon::Clk;
  use Lycon::Ctl;
  use Lycon::Dpy;
  use Lycon::Kbd;
  use Lycon::Loop;

  binmode(STDOUT,':utf8');

# ---   *   ---   *   ---

my $Cache={

  terminate=>0,

};

my $Update_Screen=1;
my $Update_Cursor=0;
my $Cursor=[0,0];

my $Scroll_Y=0;

my $Y_Offset=0;

my @ttysz=(0,0);
Lycon::ttysz(\@ttysz);

my $Canvas=Rect->nit(
  "$ttysz[0]x$ttysz[1]",
  border=>0,

);

my $File=orc('./avto');

my @File_Lines=split $NEWLINE_RE,$File;

@File_Lines=$Canvas->textfit(
  \@File_Lines,
  offscreen=>1,

);

my @Screen_Lines=();

sub on_scroll() {

  $Y_Offset+=$Scroll_Y;
  $Y_Offset*=0+(($Y_Offset>=0));

  my $beg=$Y_Offset;
  my $end=$Y_Offset+$ttysz[1]-1;

  for my $x($beg,$end) {
    if($x>$#File_Lines) {$x=$#File_Lines};

  };

  @Screen_Lines=@File_Lines[$beg..$end];
  if(@Screen_Lines<$ttysz[1]) {
    my $diff=$ttysz[1]-@Screen_Lines;
    push @Screen_Lines,($NULLSTR) x $diff;

  };

  my $i=1;
  map {$ARG="\e[$i;1H\e[2K$ARG";$i++} @Screen_Lines;

  $Scroll_Y=0;

};

on_scroll();

# ---   *   ---   *   ---

my $Curline_Original=$NULLSTR;

sub highlight_current() {

  my $curline=$Cursor->[1];
  $curline=$#Screen_Lines if $curline>$#Screen_Lines;

  $Curline_Original=$Screen_Lines[$curline];

  my $diff=

      (length $Curline_Original)
    - length descape($Curline_Original)

  ;

  my $sz=$ttysz[0]+$diff;
  $Screen_Lines[$curline]=~ s[\r\n$][];

  $Screen_Lines[$curline]=sprintf

    "\e[40;5m%-${sz}s\e[0m\r\n",
    $Screen_Lines[$curline]

  ;

};

sub restore_current() {

  my $curline=$Cursor->[1];
  $curline=$#Screen_Lines if $curline>$#Screen_Lines;

  $Screen_Lines[$curline]=$Curline_Original;

};

# ---   *   ---   *   ---

sub cursor_up() {
  $Scroll_Y-=$Cursor->[1]==0;
  $Cursor->[1]-=$Cursor->[1]>0;

  $Update_Cursor=1;

};

sub cursor_down() {
  $Scroll_Y+=$Cursor->[1]>=$ttysz[1]-2;
  $Cursor->[1]+=$Cursor->[1]<$ttysz[1]-2;

  $Update_Cursor=1;

};

sub cursor_left() {
  $Cursor->[0]-=$Cursor->[0]>0;
  $Update_Cursor=1;

};

sub cursor_right() {
  $Cursor->[0]+=$Cursor->[0]<$ttysz[0];
  $Update_Cursor=1;

};

# ---   *   ---   *   ---

Lycon::Ctl::register_events(

  -EXIT=>[0,0,sub {$Cache->{terminate}=1}],
  -MOV_A=>[

    # up
    \&cursor_up,\&cursor_up,0,

    # left
    \&cursor_left,\&cursor_left,0,

    # down
    \&cursor_down,\&cursor_down,0,

    # right
    \&cursor_right,\&cursor_right,0,

  ],

);

Lycon::Kbd::nit();
Lycon::Loop::set_quit(sub {

  return $Cache->{terminate};

});

Lycon::Clk::nit();
Lycon::Loop::set_logic(sub {

  $Update_Screen|=($Scroll_Y!=0) || $Update_Cursor;

  on_scroll() if $Scroll_Y;

  my $screen=$NULLSTR;
  if($Update_Screen) {
    highlight_current();

    $screen=join $NULLSTR,@Screen_Lines;

    restore_current();

  };

  Lycon::Loop::dwbuff(

    "\e[?25l$screen".

    # status bar
    (sprintf

      "\e[%i;1H\e[2K\e[7m%lc ".
      "%i/%i %i\e[0m",

      $ttysz[1],
      Lycon::clkdr(),

      $Cursor->[1],$ttysz[1],$Y_Offset,

    ).

    # cursor
    (sprintf "\e[%i;%iH\e[?25h",

      $Cursor->[1]+1,
      $Cursor->[0]+1

    )

  );

  $Update_Screen=0;

},[]);

Lycon::Kbd::swap_to();

Lycon::Dpy::beg();
Lycon::Loop::run();
Lycon::Dpy::end();

# ---   *   ---   *   ---
1; # ret
