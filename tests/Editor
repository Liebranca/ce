#!/usr/bin/perl
#
# finally!
#
# ---   *   ---   *   ---

# deps
package main;
  use v5.36.0;
  use strict;
  use warnings;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/lib/sys/';
  use lib $ENV{'ARPATH'}.'/lib/';

  use Style;

  use Arstd::String;
  use Arstd::Array;
  use Arstd::IO;

  use Lycon;

  use Lycon::Clk;
  use Lycon::Ctl;
  use Lycon::Dpy;
  use Lycon::Kbd;
  use Lycon::Loop;

  use GF::Mode::ANSI;
  use GF::Rect;
  use GF::Text;

  binmode(STDOUT,':utf8');

# ---   *   ---   *   ---

my $Cache={

  terminate=>0,

};

my $Update_Screen=1;
my $Update_Cursor=0;

my $Scroll_Y=0;
my $Y_Offset=0;

my $Select_Beg=undef;
my $Select_Visible=undef;

# ---   *   ---   *   ---

my @ttysz=(0,0);
Lycon::ttysz(\@ttysz);

my $G=Lycon::Loop::graphics('ANSI');
$G->nit(0,@ttysz);

my $Canvas=$G->{-canvas};
my $Cursor=$G->{-cursor};

# ---   *   ---   *   ---

my $File=orc('./avto');

my @File_Lines=split $NEWLINE_RE,$File;

@File_Lines=$Canvas->textfit(
  \@File_Lines,
  offscreen=>1,

);

my $Screen_Lines=GF::Text->new_frame(
  -rect=>$Canvas,

);

# ---   *   ---   *   ---

sub on_scroll() {

  $Y_Offset+=$Scroll_Y;

  if($Y_Offset<0) {
    $Y_Offset=$Scroll_Y=0;

  } elsif($Y_Offset>$#File_Lines) {
    $Scroll_Y=0;
    $Y_Offset=$#File_Lines;

  };

# ---   *   ---   *   ---

  my $beg=$Y_Offset;
  my $end=$Y_Offset+$Canvas->{sz_y}-1;

  if(!@File_Lines) {push @File_Lines,$NULLSTR};

  for my $x($beg,$end) {
    if($x>$#File_Lines) {$x=$#File_Lines};

  };

  my @slice=@File_Lines[$beg..$end];
  if(@slice<$Canvas->{sz_y}) {

    my $diff=$Canvas->{sz_y}-@slice;
    push @slice,($NULLSTR) x $diff;

  };

# ---   *   ---   *   ---

  my $i=1;map {

    $ARG=$Screen_Lines->nit($ARG,$i-1);

    $Screen_Lines->escape_at(

      [0,$i-1],

      q[$:gd_mvcur ].$i.q[,1;>].
      q[$:gd_cline;>],

    );

    $i++;

  } @slice;

  if(defined $Select_Beg) {
    $Select_Visible->[1]-=$Scroll_Y;

  };

  $Scroll_Y=0;

};

on_scroll();

# ---   *   ---   *   ---

sub line_clamp($x,$y,$sz) {

  $y=$#File_Lines if $y>$#File_Lines;

  my $len=length $File_Lines[$y];

  $x=$len if $x>$len;
  $sz=$len if $sz>$len;

  return ($x,$y,$sz);

};

# ---   *   ---   *   ---

sub get_visible_selection() {

  my $sel=$Select_Visible;
  my $beg=$Select_Beg;

  if(defined $sel) {

    my $beg_visible=
       $beg->[1]>=$Y_Offset
    && $beg->[1]<=$Y_Offset+$Canvas->{sz_y}

    ;

    if($beg_visible) {
      $sel->[0]=$Select_Beg->[0];

    };

    $sel->[1]=$beg->[1]-$Y_Offset;

    if($sel->[1]<0) {
      $sel->[0]=0;
      $sel->[1]=0;

    } elsif($sel->[1] > $Canvas->{sz_y}) {
      $sel->[0]=$Canvas->{sz_x};
      $sel->[1]=$Canvas->{sz_y};

    };

  };

  return $sel;

};

# ---   *   ---   *   ---

sub highlight_current() {

  my $y=$Cursor->[1];
  $y=$Canvas->{sz_y} if $y>$Canvas->{sz_y};

  my $sel=get_visible_selection();


# ---   *   ---   *   ---
# whole of current line

  $Screen_Lines->escape_at(

    [0,$y],
    q[$:gd_color 0x87;>]

  );

# ---   *   ---   *   ---
# selection open

  if(defined $sel
  && $sel->behind_2D($Cursor)) {

    $Screen_Lines->escape_at(

      $sel,
      q[$:gd_color 0x53;>]

    );

    # different lines
    if(!$sel->behind_1D($Cursor)) {
      $Screen_Lines->escape_at(

        [0,$y],
        q[$:gd_color 0x53;>]

      );

    };

  };

# ---   *   ---   *   ---
# draw cursor

  $Screen_Lines->escape_at(

    $Cursor,
    q[$:gd_color 0x30;>],

  );

# ---   *   ---   *   ---
# selection close

  if(defined $sel
  && $Cursor->behind_2D($sel)) {

    # same line
    if($Cursor->behind_1D($sel)) {

      $Screen_Lines->escape_at(

        $Cursor->offset(1),
        q[$:gd_color 0x53;>],

      );

      $Screen_Lines->escape_at(

        $sel,
        q[$:gd_color 0x87;>]

      );

      $Screen_Lines->escape_at(

        [$Canvas->{sz_x},$sel->[1]],
        q[$:gd_color 0x07;>],

      );

    } else {

      $Screen_Lines->escape_at(

        $Cursor->offset(1),
        q[$:gd_color 0x53;>]

      );

      $Screen_Lines->escape_at(

        $sel,
        q[$:gd_color 0x07;>]

      );

    };

# ---   *   ---   *   ---
# line close

  } else {

    $Screen_Lines->escape_at(

      $Cursor->offset(1),
      q[$:gd_color 0x87;>],

    );

    $Screen_Lines->escape_at(

      [$Canvas->{sz_x},$y],
      q[$:gd_color 0x07;>],

    );

  };

};

# ---   *   ---   *   ---

sub restore_current() {

  state $re=qr{^\$\:gd_color}x;

  my $y=$Cursor->[1];
  $y=$Canvas->{sz_y} if $y>$Canvas->{sz_y};

  my @selected=($y);
  my $sel=get_visible_selection();

  if(defined $sel) {
    @selected=($sel->[1],$y);
    @selected=sort {$a<=>$b} @selected;

    @selected=($selected[0]..$selected[1]);

  };

  for $y(@selected) {
    $Screen_Lines->descape($y,$re);

  };

};

# ---   *   ---   *   ---

sub cursor_set($x,$y) {

  $x*=0+($x>0);
  $y*=0+($y>0);

  $x=$Canvas->{sz_x} if $x>$Canvas->{sz_x};
  $y=$Canvas->{sz_y} if $x>$Canvas->{sz_y};

  @$Cursor=($x,$y);
  $Update_Cursor=1;

};

# ---   *   ---   *   ---

sub cursor_up(%O) {

  $O{n}//=1;

  $Scroll_Y-=$Cursor->[1]==0;
  $Cursor->[1]-=$O{n}*($Cursor->[1]>0);

  $Update_Cursor=1;

};

sub cursor_down(%O) {

  $O{n}//=1;

  $Scroll_Y+=$Cursor->[1]>=$Canvas->{sz_y}-2;
  $Cursor->[1]+=$O{n}*(
    $Cursor->[1]<($Canvas->{sz_y}-2)

  );

  $Update_Cursor=1;

};

sub cursor_left(%O) {

  $O{n}//=1;

  $Cursor->[0]-=$O{n}*($Cursor->[0]>0);
  $Update_Cursor=1;

};

sub cursor_right(%O) {

  $O{n}//=1;

  $Cursor->[0]+=$O{n}*(
    $Cursor->[0]<($Canvas->{sz_x})

  );

  $Update_Cursor=1;

};

# ---   *   ---   *   ---

sub space() {ti(q{ })};

sub backspace() {

  my $curline=$Cursor->[1]+$Y_Offset;
  $curline=$#File_Lines if $curline>$#File_Lines;

  cursor_left();

  substr $File_Lines[$curline],
    $Cursor->[0],1,$NULLSTR;

  on_scroll();

};

# ---   *   ---   *   ---

sub tab() {

  my $n=$Cursor->[0];
  $n=2-($n&1);

  my $shf=Lycon::keyhel(

    $Lycon::Kbd::Keys{LShift}

  );

  if($shf) {

    my $pos=$Cursor->[1]+$Y_Offset;
    $pos=$#File_Lines if $pos>$#File_Lines;

    my $re=qr(^[\s]{0,$n})x;
    $File_Lines[$pos]=~ s/$re//;

    cursor_left(n=>$n);
    on_scroll();

    # clear key state
    # avoids fast repeat
    Lycon::keycl(

      $Lycon::Kbd::Keys{tab}

    );

  } else {

    ti(q{ } x $n,stay=>1);
    cursor_right(n=>$n);

  };

};

# ---   *   ---   *   ---

sub surp() {

  my $c=$Cursor->offset(0,$Y_Offset);
  my ($x,$y,$sz)=($c->[0],$c->[1],1);

  ($x,$y,$sz)=line_clamp($x,$y,$sz);
  my @selected=([$x,$y,$sz]);

# ---   *   ---   *   ---

  my $sel=$Select_Beg;

  if(defined $sel) {

    my ($beg,$end)=$c->least($sel);
    if($beg->[1] == $end->[1]) {

      my ($x,$y,$sz)=(
        $beg->[0],$beg->[1],
        $end->[0]-$beg->[0]

      );

      ($x,$y,$sz)=line_clamp($x,$y,$sz);
      @selected=([$x,$y,$sz]);

# ---   *   ---   *   ---

    } else {

      ($x,$y,$sz)=(
        $beg->[0],$beg->[1],
        $Canvas->{sz_x}-$beg->[1]

      );

      ($x,$y,$sz)=line_clamp($x,$y,$sz);
      @selected=([$x,$y,$sz]);

      for $y($beg->[1]+1..$end->[1]) {
      last if $y==$end->[1];

        my ($x,$sz)=(0,$Canvas->{sz_x});

        ($x,$y,$sz)=line_clamp($x,$y,$sz);
        push @selected,[0,$y,$sz];

      };

      ($x,$y,$sz)=(
        0,$end->[1],$end->[0]

      );

      ($x,$y,$sz)=line_clamp($x,$y,$sz);
      push @selected,[$x,$y,$sz];

    };

# ---   *   ---   *   ---

  };

  my $pop_nl=undef;

  for my $ar(@selected) {

    ($x,$y,$sz)=@$ar;
    my ($first,$last)=(

      $ar==$selected[ 0],
      $ar==$selected[-1]

    );

    substr $File_Lines[$y],
      $x,$sz,$NULLSTR;

# ---   *   ---   *   ---

    my $x_at_eol=(
      $x>=length $File_Lines[$y]

    )

    && $y<$#File_Lines
    && ($first || $last)

    ;

    if($x_at_eol) {

      if($last) {
        $File_Lines[$y].=$File_Lines[$y+1];
        $File_Lines[$y+1]=undef;

      } elsif(@selected>1) {
        $pop_nl=$y;

      };

    } elsif(!length $File_Lines[$y]) {
      $File_Lines[$y]=undef;

    };

# ---   *   ---   *   ---

  };

  array_filter(\@File_Lines,
    sub($s) {return defined $s}

  );

  if(defined $pop_nl && $pop_nl<$#File_Lines) {

    $y=$pop_nl;

    $File_Lines[$y].=$File_Lines[$y+1];
    $File_Lines[$y+1]=undef;

    array_filter(\@File_Lines,
      sub($s) {return defined $s}

    );

  };

# ---   *   ---   *   ---

  cursor_set(
    $selected[0]->[0],
    $selected[0]->[1],

  );

  on_scroll();

};

# ---   *   ---   *   ---

sub add_new_line() {

  ti("\n",stay=>1,refresh=>0);

  my $pos=$Cursor->[1]+$Y_Offset;
  $pos=$#File_Lines if $pos>$#File_Lines;

  my @ins=split $NEWLINE_RE,$File_Lines[$pos];

  $File_Lines[$pos]=$ins[0];

  array_insert(
    \@File_Lines,$pos+1,

    $ins[1],$File_Lines[$pos+1]

  );

  @File_Lines=$Canvas->textfit(
    \@File_Lines,
    offscreen=>1,

  );

  $Cursor->[0]=0;

  cursor_down();
  on_scroll();

};

# ---   *   ---   *   ---

sub end_of_line() {

  my $pos=$Cursor->[1]+$Y_Offset;
  $pos=$#File_Lines if $pos>$#File_Lines;

  my $curline=$File_Lines[$pos];

  $Cursor->[0]=length $curline;
  $Update_Cursor=1;

};

sub beg_of_line() {

  my $pos=$Cursor->[1]+$Y_Offset;
  $pos=$#File_Lines if $pos>$#File_Lines;

  my $x=0;
  my $curline=$File_Lines[$pos];

  $curline=~ m[^(\s+)];
  $x=length $1 if defined $1;
  $x=0 if $Cursor->[0] == $x;

  $Cursor->[0]=$x;
  $Update_Cursor=1;

};

# ---   *   ---   *   ---

sub re_pag() {

  return if !$Y_Offset;

  $Scroll_Y-=$Canvas->{sz_y}-2;
  $Update_Cursor=1;

};

sub av_pag() {

  return if $Y_Offset>$#File_Lines;

  $Scroll_Y+=$Canvas->{sz_y}-2;
  $Update_Cursor=1;

};

# ---   *   ---   *   ---

sub ti($ibuff,%O) {

  # defaults
  $O{stay}//=0;
  $O{refresh}//=1;

  my $curline=$Cursor->[1]+$Y_Offset;
  $curline=$#File_Lines if $curline>$#File_Lines;

  my $l=length $File_Lines[$curline];

  if($Cursor->[0]>=$l) {

    my $diff=$Cursor->[0]-$l;
    my $head=q{ } x $diff;

    $File_Lines[$curline].=$head.$ibuff;

  } else {

    my $tail=substr $File_Lines[$curline],
      $Cursor->[0],1;

    substr $File_Lines[$curline],
      $Cursor->[0],1,$ibuff.$tail;

  };

  $Select_Beg=undef;
  $Select_Visible=undef;

  cursor_right(n=>length $ibuff) if !$O{stay};
  on_scroll() if $O{refresh};

};

# ---   *   ---   *   ---

sub beg_selection() {
  $Select_Beg=$Cursor->offset(0,$Y_Offset);
  $Select_Visible=$Cursor->offset(0);

};

# ---   *   ---   *   ---

Lycon::Ctl::register_events(

  -COM=>[

    # escape
    0,0,sub {$Cache->{terminate}=1},

    # ret
    \&add_new_line,\&add_new_line,0,

    # space
    \&space,\&space,0,

    # tab
    \&tab,\&tab,0,

    # backspace
    \&backspace,\&backspace,0,

    # delete
    \&surp,\&surp,0,

  ],

  -NAV=>[

    # home
    \&beg_of_line,0,0,

    # end
    \&end_of_line,0,0,

    # re
    \&re_pag,\&re_pag,0,

    # av
    \&av_pag,\&av_pag,0,

  ],

  -CTL_L=>[

    # shift
    \&beg_selection,0,0,

    # ctrl
    0,0,0,

    # alt
    0,0,0,

  ],

  -CTL_R=>[

    # shift
    0,0,0,

    # ctrl
    0,0,0,

    # alt
    0,0,0,

  ],

  -MOV_A=>[

    # up
    \&cursor_up,\&cursor_up,0,

    # left
    \&cursor_left,\&cursor_left,0,

    # down
    \&cursor_down,\&cursor_down,0,

    # right
    \&cursor_right,\&cursor_right,0,

  ],

);

# ---   *   ---   *   ---

Lycon::Kbd::nit();
Lycon::Loop::set_quit(sub {

  return $Cache->{terminate};

});

Lycon::Clk::nit();

# ---   *   ---   *   ---

Lycon::Loop::set_logic(sub {

  if(keyhel('LCtrl')) {

    if(keyhel('TIQ')) {
      $Cache->{terminate}=1;

    };

  };

# ---   *   ---   *   ---

  my $ibuff=Lycon::keyibl();
  ti($ibuff) if length $ibuff;

  $Update_Screen|=($Scroll_Y!=0) || $Update_Cursor;

  on_scroll() if $Scroll_Y;

  my $screen=$NULLSTR;
  if($Update_Screen) {

    if($Update_Cursor && !keyhel('LShift')) {
      $Select_Beg=undef;
      $Select_Visible=undef;

    };

    highlight_current();
    $screen=$Screen_Lines->flat();

    restore_current();

  };

# ---   *   ---   *   ---

  my $curline=$Cursor->[1]+$Y_Offset;
  $curline=$#File_Lines if $curline>$#File_Lines;

  my $sel=$Select_Beg;
  $sel=[0,0] if !defined $sel;

  my $status=sprintf "%lc C:%i/%i O:%i",

    Lycon::clkdr(),

    $Cursor->[1],$Canvas->{sz_y},
    $Y_Offset,

  ;

# ---   *   ---   *   ---

  Lycon::Loop::dwbuff(

    $screen.

    q[$:gd_mvcur

      $O{gd}->{-canvas}->{sz_y}+1,1

    ;>].

    q[$:gd_cline;>].
    q[$:gd_color 0x70;>].

    # status bar
    (sprintf "%-$Canvas->{sz_x}s",$status).

    q[$:gd_color 0x07;>]

  );

  $Update_Screen=0;
  $Update_Cursor=0;

},[]);

# ---   *   ---   *   ---

Lycon::Kbd::swap_to();

Lycon::Dpy::beg();

Lycon::Loop::dwbuff(q[$:gd_encur 0;>]);

Lycon::Loop::run(panic=>6000);
Lycon::Dpy::end();

# ---   *   ---   *   ---
1; # ret
