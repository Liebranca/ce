#!/usr/bin/perl
# ---   *   ---   *   ---
#:CUT;>
# ---   *   ---   *   ---
# LYCON_EXT
# Extends lycon with classes
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,
# ---   *   ---   *   ---

sub nope {;};

sub FATAL {

  lycon::dpy::end();

  my $fmat=shift;
  printf $fmat."\r\n",@_;

  exit;

};

1; # ret

package lycon::clk;
  use strict;
  use warnings;

  use lib $ENV{'ARPATH'}.'/lib/';
  use avt;

# ---   *   ---   *   ---
# global state

my %CLK=(

  -FLEN=>0x6000,

  -VSZ=>8,
  -VIS=>

    "\x{01A9}\x{01AA}\x{01AB}\x{01AC}".
    "\x{01AD}\x{01AE}\x{01AF}\x{01B0}",

);

# ---   *   ---   *   ---
# get/set

sub flen {
  return avt::getset(
    \%CLK,-FLEN,shift

  );
};

sub vsz {
  return avt::getset(
    \%CLK,-VSZ,shift

  );
};

sub vis {
  return avt::getset(
    \%CLK,-VIS,shift

  );
};


# ---   *   ---   *   ---
# constructor

sub nit {

  flen(shift);
  vis(shift);
  vsz(shift);

  lycon::clknt(flen,vis,vsz);

};

# ---   *   ---   *   ---

package lycon::kbd;
  use strict;
  use warnings;

  use lib $ENV{'ARPATH'}.'/lib/';

  use lang;

  use avt;
  use genks;

# ---   *   ---   *   ---
# global state

my @KEYS=();
my %KEYS=();

my @SWKEYS=();
my %KEYIDS=();

# ---   *   ---   *   ---
# errmesses

  use constant {

    E_NOKEY=>"%s <%s> is not bound",
    E_YESKEY=>"%s <%s> is already bound",

  };

# ---   *   ---   *   ---
# errchk

;;my $ERRME_PROTO=<<";;EOF";

sub %s {

  my \$key=shift;
  my \$inv=shift;

  my \$h=%s;
  my \$type=%s;

  my \$has=exists \$h->{\$key};

  if(!\$has && \$inv) {
    lycon::FATAL(E_NOKEY,\$type,\$key);

  } elsif(\$has && !\$inv) {
    lycon::FATAL(E_YESKEY,\$type,\$key);

  };

};
;;EOF

# ---   *   ---   *   ---
# generate error checks

;;eval(
  sprintf $ERRME_PROTO,
  'HASKEY','\%KEYS','Key'

);eval(
  sprintf $ERRME_PROTO,
  'HASID','\%KEYIDS','KeyID'

);

# ---   *   ---   *   ---
# in: user-given name,keylay name,code reference
# add a key to the event list

sub DEFINE {

  my $key=shift;
  my $id=shift;

  HASKEY($key,0);
  HASID($id,0);

  $KEYIDS{$id}=$key;

  my $onTap=shift;
  my $onHel=shift;
  my $onRel=shift;

  push @KEYS,$key;
  push @KEYS,[$id,$onTap,$onHel,$onRel];

# ---   *   ---   *   ---
# in:user-given name, callbacks list
# swap out callbacks on this key

};sub REDEF {

  my $key=shift;
  HASKEY($key,1);

  my $onTap=shift;
  my $onHel=shift;
  my $onRel=shift;

  my $idex=($KEYS{$key}*2)+1;

  $KEYS[$idex]->[1]=($onTap)
    ? $onTap : $KEYS[$idex]->[1];

  $KEYS[$idex]->[2]=($onHel)
    ? $onHel : $KEYS[$idex]->[2];

  $KEYS[$idex]->[3]=($onRel)
    ? $onRel : $KEYS[$idex]->[3];

# ---   *   ---   *   ---
# get access by internal ID

};sub KEY_BY_ID {

  my $id=shift;
  HASID($id,1);

  my $key=$KEYIDS{$id};

  return $key;

# ---   *   ---   *   ---
# ^save and redef by internal ID

};sub SV_BY_ID {

  my $id=shift;
  my $key=KEY_BY_ID($id);

  my $calls=SVDEF($key);
  REDEF($key,@_);

  return [$key,$calls];

};

# ---   *   ---   *   ---
# in: user-given name
# store callbacks on this key

sub SVDEF {

  my $key=shift;
  HASKEY($key,1);

  my $idex=($KEYS{$key}*2)+1;

  return [

    $KEYS[$idex]->[1],
    $KEYS[$idex]->[2],
    $KEYS[$idex]->[3],

  ];

# ---   *   ---   *   ---
# ^restore saved callbacks

};sub LDDEF {

  my $key=shift;
  my $calls=shift;
  HASKEY($key,1);

  my $idex=($KEYS{$key}*2)+1;

  $KEYS[$idex]->[1]=$calls->[0];
  $KEYS[$idex]->[2]=$calls->[1];
  $KEYS[$idex]->[3]=$calls->[2];

};

# ---   *   ---   *   ---
# register events

sub nit {

  %KEYS=@KEYS;

  # check that reserved keys are mapped
  my $chk=lycon::ctl::ALL_USED_KEYS();
  for my $id(keys %$chk) {

    my $key=$chk->{$id};

    # set blank callbacks if reserved && unused
    if(!exists $KEYIDS{$id}) {
      DEFINE($key,$id,'','','');

    };

  # now register the events
  };%KEYS=@KEYS;
  lycon::keynt(genks::pl_keymap(\@KEYS,\%KEYS));

  # load callbacks
  ldkeys();

};

# ---   *   ---   *   ---
# load defined callbacks

sub ldkeys {

  for(my $x=1;$x<@KEYS;$x+=2) {

    my $name=$KEYS[$x-1];
    my @ar=@{$KEYS[$x]}[1..3];

    my $i=0;

# ---   *   ---   *   ---

    # convert perl subs to closures
    # ie, callable from C
    for my $ev(@ar) {

      if(lang::is_code($ev)) {
        my $cev=lycon::ffi->closure($ev);
        $cev->sticky();

        lycon::keycall($KEYS{$name},$i,$cev);

      };$i++;

    };

  };
};

# ---   *   ---   *   ---

package lycon::dpy;
  use strict;
  use warnings;

# ---   *   ---   *   ---

sub beg {
  print "\e[0m\e[2J\e[0H\e[?25l";
  STDOUT->flush();

};

sub end {
  print "\e[0m\e[2J\e[0H\e[?25h";
  STDOUT->flush();

};

# ---   *   ---   *   ---

package lycon::loop;
  use strict;
  use warnings;

  # lame fwd decl
  my %LOOP=();

# ---   *   ---   *   ---
# shorthands

sub ALWAYS {return 1;};
sub NEVER {return 0;};

# ---   *   ---   *   ---
# flush out the draw buffer as-is

sub ascii {

  print $LOOP{-DRAW_BUFF};
  STDOUT->flush();

  $LOOP{-DRAW_BUFF}='';

};

# ---   *   ---   *   ---
# global state

%LOOP=(


  -LOGI_PROC=>\&lycon::nope,
  -LOGI_ARGS=>[],

  -QUIT_PROC=>\&NEVER,

  -DRAW_PROC=>\&ascii,
  -DRAW_BUFF=>'',

  -BUSY=>0,

);

# ---   *   ---   *   ---
# getters

sub logic {
  return $LOOP{-LOGI_PROC}->(
    @{$LOOP{-LOGI_ARGS}}

  );
};

sub quit {return $LOOP{-QUIT_PROC}->();};
sub draw {return $LOOP{-DRAW_PROC}->();};

sub draw_update {
  return 0<length $LOOP{-DRAW_BUFF};

};sub dwbuff {$LOOP{-DRAW_BUFF}.=shift;};

# ---   *   ---   *   ---
# setters

sub set_logic {
  $LOOP{-LOGI_PROC}=shift;
  $LOOP{-LOGI_ARGS}=shift;

};

sub set_quit {$LOOP{-QUIT_PROC}=shift;};
sub set_draw {$LOOP{-DRAW_PROC}=shift;};
sub busy {return avt::getset(\%LOOP,-BUSY,shift);};

# ---   *   ---   *   ---
# execute the main loop

sub run {

  while(!quit) {

    busy(lycon::gtevcnt());

    if(draw_update) {
      (draw);

    };

    lycon::tick(busy);

    lycon::keyrd();
    lycon::keychk();

    (logic);

  };

};

# ---   *   ---   *   ---

package lycon::ctl;
  use strict;
  use warnings;

  use lib $ENV{'ARPATH'}.'/lib/';

  use lang;
  use queue;


my %CTL=(

  -STACK=>[],

  -COMMOPS=>{

    -EXIT=>['escape'],
    -ACCEPT=>['ret'],
    -ACCEL=>['space'],

    -MOV_A=>['up','down','right','left'],
    -MOV_B=>['w','a','s','d'],
    -MOV_C=>['i','k','j','l'],

  },

  -MODULES=>{},

);sub STACK {return $CTL{-STACK};};
;;sub MODULES {return $CTL{-MODULES};};

# ---   *   ---   *   ---
# register a module that depends on lycon

;;sub REGISTER {

  my $module=caller;
  my @keys=@_;

  # avoid initializing twice!
  if(exists MODULES->{$module}) {return;};

  # initialize
  my $ref=MODULES->{$module}={

    -KBD=>{},
    -QUEUE=>queue::nit(),

  };

# ---   *   ---   *   ---
# iter: get set of callbacks for
# each key reserved by module

  while(@keys) {
    my $key=shift @keys;
    my $calls=shift @keys;

    for my $call(@$calls) {
      if(!lang::is_code($call)) {
        $call=\&lycon::nope;

      };
    };

    $ref->{-KBD}->{$key}=$calls;
  };

# ---   *   ---   *   ---
# ^ get keys used by module

};sub USED_KEYS {

  my $module=shift;
  if(!defined $module) {
    $module=caller;

  };

  my $keys=MODULES->{$module}->{-KBD};

  my @ids=();
  for my $key(keys %$keys) {
    push @ids,@{$CTL{-COMMOPS}->{$key}};

  };

  return \@ids;

# ---   *   ---   *   ---
# ^ get all keys used by ALL modules

};sub ALL_USED_KEYS {

  my $ref=MODULES;
  my %keys=();

  for my $module(keys %$ref) {

    my $ids=USED_KEYS($module);
    for my $id(@$ids) {
      $keys{$id}="-".(uc $id);

    };

  };return \%keys;
};

# ---   *   ---   *   ---

sub get_module_queue {

  my $module=caller;
  return MODULES->{$module}->{-QUEUE};

};

# ---   *   ---   *   ---

sub switch {

  my $logic=shift;
  my $args=shift;
  my $draw=shift;

  push @{STACK()},
    $LOOP{-LOGI_PROC},
    $LOOP{-LOGI_ARGS};

  push @{STACK()},$LOOP{-DRAW_PROC};

  lycon::loop::set_logic($logic);
  lycon::loop::set_draw($draw);

};sub ret {

  my $draw=pop @{STACK()};
  my $args=pop @{STACK()};
  my $logic=pop @{STACK()};

  lycon::loop::set_logic($logic,$args);
  lycon::loop::set_draw($draw);

};

# ---   *   ---   *   ---
# transfers control from one module to another

sub transfer {

  my $module=caller;

  my $keys=MODULES->{$module}->{-KBD};
  my $queue=MODULES->{$module}->{-QUEUE};

  my @saved_k_data=();

  for my $key(keys %$keys) {

    my $ids=$CTL{-COMMOPS}->{$key};
    my $calls=$keys->{$key};

    my $i=0;

# ---   *   ---   *   ---

    for my $id(@$ids) {
      my $k_data=lycon::kbd::SV_BY_ID($id);
      my @calls=(@$calls)[$i..$i+2];

      $i+=3;

      lycon::kbd::REDEF(
        $k_data->[0],
        @calls

      );push @saved_k_data,$k_data;
    };

# ---   *   ---   *   ---

  };lycon::kbd::ldkeys();

  # TODO: pass draw,logic && logic_args
  # for each registered module

  switch(

    sub {

      if($queue->pending) {
        $queue->ex;

      } else {

        ret;for my $k_data(@saved_k_data) {
          lycon::kbd::LDDEF(@$k_data);

        };

      };

    },[],\&lycon::loop::ascii,

  );

};

# ---   *   ---   *   ---
1; # ret
